// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mottu.Infra.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Mottu.Infra.Data.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20250823063044_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Mottu.Domain.MotorcycleAggregate.Motorcycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreationTime");

                    b.ToTable("Motorcycles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationTime = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            CreationTime = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Mottu.Domain.OutboxAggregate.Outbox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("OccuredOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ProcessedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.HasKey("Id");

                    b.HasIndex("OccuredOn");

                    b.HasIndex("ProcessedOn");

                    b.ToTable("Outbox", (string)null);
                });

            modelBuilder.Entity("Mottu.Domain.RentalAggregate.Rental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CourierId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ForecastEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MotorcycleId")
                        .HasColumnType("integer");

                    b.Property<int>("Plan")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CourierId");

                    b.HasIndex("MotorcycleId");

                    b.HasIndex("Status");

                    b.ToTable("Rentals", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourierId = 2,
                            CreatedAtUtc = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ForecastEndDate = new DateTime(2025, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MotorcycleId = 1,
                            Plan = 7,
                            StartDate = new DateTime(2025, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        });
                });

            modelBuilder.Entity("Mottu.Domain.UserAggregate.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CnhImageUri")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("CnhType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BirthDate");

                    b.HasIndex("Role");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAtUtc = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Role = 0
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1995, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CnhImageUri = "courier1-cnh.png",
                            CnhType = 0,
                            CreatedAtUtc = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Role = 1
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(1998, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CnhImageUri = "courier2-cnh.png",
                            CnhType = 2,
                            CreatedAtUtc = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Role = 1
                        });
                });

            modelBuilder.Entity("Mottu.Domain.MotorcycleAggregate.Motorcycle", b =>
                {
                    b.OwnsOne("Mottu.Domain.MotorcycleAggregate.ValueObjects.BrandName", "Brand", b1 =>
                        {
                            b1.Property<int>("MotorcycleId")
                                .HasColumnType("integer");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(60)
                                .HasColumnType("character varying(60)")
                                .HasColumnName("Brand");

                            b1.HasKey("MotorcycleId");

                            b1.ToTable("Motorcycles");

                            b1.WithOwner()
                                .HasForeignKey("MotorcycleId");

                            b1.HasData(
                                new
                                {
                                    MotorcycleId = 1,
                                    Value = "Honda"
                                },
                                new
                                {
                                    MotorcycleId = 2,
                                    Value = "Yamaha"
                                });
                        });

                    b.OwnsOne("Mottu.Domain.MotorcycleAggregate.ValueObjects.LicensePlate", "LicensePlate", b1 =>
                        {
                            b1.Property<int>("MotorcycleId")
                                .HasColumnType("integer");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(7)
                                .IsUnicode(false)
                                .HasColumnType("character varying(7)")
                                .HasColumnName("LicensePlate");

                            b1.HasKey("MotorcycleId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("Motorcycles");

                            b1.WithOwner()
                                .HasForeignKey("MotorcycleId");

                            b1.HasData(
                                new
                                {
                                    MotorcycleId = 1,
                                    Value = "ABC1234"
                                },
                                new
                                {
                                    MotorcycleId = 2,
                                    Value = "XYZ9A23"
                                });
                        });

                    b.OwnsOne("Mottu.Domain.MotorcycleAggregate.ValueObjects.ManufactureYear", "Year", b1 =>
                        {
                            b1.Property<int>("MotorcycleId")
                                .HasColumnType("integer");

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("Year");

                            b1.HasKey("MotorcycleId");

                            b1.ToTable("Motorcycles");

                            b1.WithOwner()
                                .HasForeignKey("MotorcycleId");

                            b1.HasData(
                                new
                                {
                                    MotorcycleId = 1,
                                    Value = 2020
                                },
                                new
                                {
                                    MotorcycleId = 2,
                                    Value = 2024
                                });
                        });

                    b.Navigation("Brand")
                        .IsRequired();

                    b.Navigation("LicensePlate")
                        .IsRequired();

                    b.Navigation("Year")
                        .IsRequired();
                });

            modelBuilder.Entity("Mottu.Domain.RentalAggregate.Rental", b =>
                {
                    b.OwnsOne("Mottu.Domain.RentalAggregate.ValueObjects.Money", "DailyPrice", b1 =>
                        {
                            b1.Property<int>("RentalId")
                                .HasColumnType("integer");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .IsUnicode(false)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("DailyPriceCurrency");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("DailyPrice");

                            b1.HasKey("RentalId");

                            b1.ToTable("Rentals");

                            b1.WithOwner()
                                .HasForeignKey("RentalId");

                            b1.HasData(
                                new
                                {
                                    RentalId = 1,
                                    Currency = "BRL",
                                    Value = 30.00m
                                });
                        });

                    b.Navigation("DailyPrice")
                        .IsRequired();
                });

            modelBuilder.Entity("Mottu.Domain.UserAggregate.User", b =>
                {
                    b.OwnsOne("Mottu.Domain.UserAggregate.ValueObjects.CNH", "CnhNumber", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("integer");

                            b1.Property<int>("Category")
                                .HasColumnType("integer")
                                .HasColumnName("CnhCategory");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(11)
                                .IsUnicode(false)
                                .HasColumnType("character varying(11)")
                                .HasColumnName("CnhNumber");

                            b1.HasKey("UserId");

                            b1.HasIndex("Number")
                                .IsUnique();

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = 2,
                                    Category = 0,
                                    Number = "12345678901"
                                },
                                new
                                {
                                    UserId = 3,
                                    Category = 2,
                                    Number = "98765432100"
                                });
                        });

                    b.OwnsOne("Mottu.Domain.UserAggregate.ValueObjects.CNPJ", "Cnpj", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("integer");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(14)
                                .IsUnicode(false)
                                .HasColumnType("character varying(14)")
                                .HasColumnName("Cnpj");

                            b1.HasKey("UserId");

                            b1.HasIndex("Number")
                                .IsUnique();

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = 2,
                                    Number = "12345678000195"
                                },
                                new
                                {
                                    UserId = 3,
                                    Number = "98765432000109"
                                });
                        });

                    b.OwnsOne("Mottu.Domain.UserAggregate.ValueObjects.PersonName", "Name", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("integer");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(120)
                                .HasColumnType("character varying(120)")
                                .HasColumnName("Name");

                            b1.HasKey("UserId");

                            b1.HasIndex("Value");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = 1,
                                    Value = "Admin User"
                                },
                                new
                                {
                                    UserId = 2,
                                    Value = "Courier One"
                                },
                                new
                                {
                                    UserId = 3,
                                    Value = "Courier Two"
                                });
                        });

                    b.Navigation("CnhNumber");

                    b.Navigation("Cnpj");

                    b.Navigation("Name")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
